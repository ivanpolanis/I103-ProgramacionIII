public class Parcial{
    public ListaGenerica<String> resolver(Grafo<Ciudad> ciudades, String origen, String destino){
        if(ciudades == null || ciudades.esVacio())
            return null;
        ListaGenerica<Vertice<Ciudad>> V = ciudades.listaDeVertices();
        Vertice<Ciudad> vIni = null;
        Vertice<Ciudad> vFin = null;
        for(int i = 0; i < V.tamanio(); i++){
            if(V.elemento(i).dato().getNombre().equals(origen))
                vIni = V.elemento(i);
            if(V.elemento(i).dato().getNombre().equals(destino))
                vFin = V.elemento(i);
        }

        boolean[] marca = new boolean[V.tamanio()];

        ListaGenerica<String> l = new ListaGenericaEnlazada<>();

        if(vIni != null && vFin != null)
            resolver(ciudades, vIni, vFin, marca, new boolean[v.tamanio()], l);

        return l;

    }

    public boolean resolver(Grafo<Ciudad> ciudades, Vertice<Ciudad> origen, Vertice<Ciudad> destino, boolean[] marca, boolean[] visitados, ListaGenerica<String> l){
       marca[origen.posicion()] = true;

       if(origen.dato().getNombre().equals(destino.dato().getNombre)){
            if(!visitados[origen.posicion()])
                l.agregarFinal(origen.dato().getNombre());
            return true;
       }

       ListaGenerica<Arista<Ciudad>> ady = ciudades.listaDeAdyacentes(origen);
       ady.comenzar();
       boolean flag = false;
       while(!ady.fin()){
            boolean flag2 = false;
            Arista<Ciudad> act = ady.proximo();
            Vertice<Ciudad> v = act.verticeDestino();
            int j = v.posicion();
            if(!marca[j] && v.getFase()>1 && act.peso() != 0){
                flag2 = resolver(ciudades, v, destino, marca, visitados, l)
                if(flag2)
                    if(!visitados[j]){
                        l.agregarFinal(v.dato().getNombre());
                    }
                }
                flag = flag2;
                marca[j] = false;
            }
       }
       return flag;
    }
}
